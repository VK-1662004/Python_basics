# Introduction to Loops
# Sometimes a programmer wants to execute a group of statements a certain number of times. This can be done using loops. Based on this loops are further classified into following main types;
# -->for loop
# -->while loop
# The for Loop
# for loops can iterate over a sequence of iterable objects in python. Iterating over a sequence is nothing but iterating over strings, lists, tuples, sets and dictionaries.
# Example: iterating over a string:
# name = 'Abhishek'
# for i in name:
#     print(i, end=", ")

# Output:
# A, b, h, i, s, h, e, k,

# Example: iterating over a list:
# colors = ["Red", "Green", "Blue", "Yellow"]
# for x in colors:
#     print(x)

# Output:
# Red
# Green
# Blue
# Yellow

# Similarly, we can use loops for lists, sets and dictionaries.

# range():
# What if we do not want to iterate over a sequence? What if we want to use for loop for a specific number of times?

# Here, we can use the range() function.

# Example:
# for k in range(5):
#     print(k)

# Output:
# 0
# 1
# 2
# 3
# 4
# Here, we can see that the loop starts from 0 by default and increments at each iteration.

# But we can also loop over a specific range.

# Example:
# for k in range(4,9):
#     print(k)

# Output:
# 4
# 5
# 6
# 7
# 8

# Quick Quiz
# Explore about third parameter of range (ie range(x, y, z)):
#     for i in range(1,11,2):
#         print(i,sep=",")

# Python while Loop
# As the name suggests, while loops execute statements while the condition is True. As soon as the condition becomes False, the interpreter comes out of the while loop.

# Example:
# count = 5
# while (count > 0):
#   print(count)
#   count = count - 1

# Output:
# 5
# 4
# 3
# 2
# 1

# Here, the count variable is set to 5 which decrements after each iteration. Depending upon the while loop condition, we need to either increment or decrement the counter variable (the variable count, in our case) or the loop will continue forever.

# Else with While Loop
# We can even use the else statement with the while loop. Essentially what the else statement does is that as soon as the while loop condition becomes False, the interpreter comes out of the while loop and the else statement is executed.

# Example:
# x = 5
# while (x > 0):
#     print(x)
#     x = x - 1
# else:
#     print('counter is 0')

# Output:
# 5
# 4
# 3
# 2
# 1
# counter is 0


# break statement
# The break statement enables a program to skip over a part of the code. A break statement terminates the very loop it lies within.

# example
# for i in range(1,101,1):
#     print(i ,end=" ")
#     if(i==50):
#         break
#     else:
#         print("Mississippi")
# print("Thank you")

# output
# 1 Mississippi
# 2 Mississippi
# 3 Mississippi
# 4 Mississippi
# 5 Mississippi
# .
# .
# .
# 50 Mississippi

# Continue Statement
# The continue statement skips the rest of the loop statements and causes the next iteration to occur.

# example
# for i in [2,3,4,6,8,0]:
#     if (i%2!=0):
#         continue
#     print(i)

# output
# 2
# 4
# 6
# 8
# 0